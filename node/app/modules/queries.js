// Generated by CoffeeScript 1.8.0
(function() {
  var bl, http, _description, _film, _keys, _prefixes, _query, _search;

  http = require('http');

  bl = require('bl');

  module.exports = {
    search: function(vals, cb) {
      return _query(_search(vals), cb);
    }
  };


  /*
   * Keys
   * 
   * Cette object stocke le(s) prédicat(s) des concepts que nous manipulons
   * Utile à la génération de requêtes
   */

  _keys = {
    title: 'dc:title',
    actor: ['lmdb:actor', 'lmdb:actor_name'],
    director: ['lmdb:director', 'lmdb:director_name'],
    editor: ['lmdb:editor', 'lmdb:editor_name'],
    writer: ['lmdb:writer', 'lmdb:writer_name'],
    composer: ['lmdb:music_contributor', 'lmdb:music_contributor_name'],
    song: ['lmdb:film_featured_song', 'lmdb:film_featured_song_name'],
    subject: ['skos:subject', 'lmdb:film_subject_name'],
    genre: ['lmdb:genre', 'lmdb:film_genre_name'],
    runtime: 'lmdb:runtime',
    date: 'dc:date'
  };


  /*
   * Prefixes
   * 
   * Un ensemble de préfixes utiles
   */

  _prefixes = "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX dc: <http://purl.org/dc/terms/>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX lmdb: <http://data.linkedmdb.org/resource/movie/>\nPREFIX foaf: <http://xmlns.com/foaf/0.1/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>";


  /*
   * Query
   * 
   * La fonction permettant d'executer une requête (HTML POST) SPARQL sur le endpoint de LinkedMDB
   */

  _query = function(query, cb) {
    var data, options, req;
    data = 'query=' + _prefixes + ' ' + query;
    options = {
      hostname: 'data.linkedmdb.org',
      path: '/sparql',
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Content-Length': data.length
      }
    };
    req = http.request(options, function(res) {
      return res.pipe(bl(cb));
    });
    req.on('error', function(e) {
      return console.log(e.message);
    });
    req.write(data);
    return req.end();
  };


  /*
   * Recherche d'un film
   *
   * Un utilisateur peut rechercher un film en renseignant nos différents critères (acteurs, réalilsateur, ...).
   * Ces informations sont centralisées dans l'objet vals
   *
   * Un exemple ici avec 2 acteurs et un réalisateur (pour le film : Saw)
   */

  _search = function(vals) {
    var arr, i, key, opt, val, _i, _len;
    opt = '';
    for (key in vals) {
      arr = vals[key];
      if (key === 'title') {
        opt += "?film " + _keys[key] + " \"" + arr + "\" .";
      } else if (key === 'runtime' || key === 'date') {
        opt += "?film " + _keys[key] + " ?" + key + " .\nFILTER(?" + key + " " + arr[0] + " \"" + arr[1] + "\") .";
      } else {
        i = 0;
        for (_i = 0, _len = arr.length; _i < _len; _i++) {
          val = arr[_i];
          opt += "OPTIONAL {\n	?film " + _keys[key][0] + " ?" + key + i + " .\n	?" + key + i + " " + _keys[key][1] + " \"" + val + "\" .\n}.";
          i += 1;
        }
      }
    }
    return "SELECT *\nWHERE {\n	?film a lmdb:film .\n	" + opt + "\n}";
  };


  /*
   * Description d'un film
   *
   * Connaissant l'URI d'un film, nous pouvons lancer des requêtes nous permettant de le décrire (acteurs, réalisateur, ...) à nos utilisateurs
   */

  _film = '<http://data.linkedmdb.org/resource/film/1771>';

  _description = function(film, key) {
    var p, p0, p1;
    if (key === 'title' || key === 'runtime' || key === 'date') {
      p = keys[key];
      return "SELECT *\nWHERE {\n	" + film + " " + p + " ?" + key + " .\n}";
    } else {
      p0 = keys[key][0];
      p1 = keys[key][1];
      return "SELECT *\nWHERE {\n	" + film + " " + p0 + " [ " + p1 + " ?" + key + " ] .\n}";
    }
  };

}).call(this);
